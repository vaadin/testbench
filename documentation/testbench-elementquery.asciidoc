---
title: Finding Elements to Interact With
order: 30
layout: page
---

[[testbench.elementquery]]
= Finding Elements to Interact With

The high-level `ElementQuery` API allows querying Vaadin components in the browser
according to their component class type, hierarchy, caption, and other
properties. Once one or more components are found, they can be interacted upon.
The query API forms a domain-specific language (DSL), embedded in the
`TestBenchTestCase` class.

The basic idea of element queries is to match elements and return queries, which can
again be queried upon, until terminated by a terminal query that returns one or
more elements.

Consider the following query:

```java
List<ButtonElement> buttons = $(ButtonElement.class).all();
```

The query returns a list of HTML elements of all the `Button`
components in the UI. Every Vaadin component has its corresponding element
class, which has methods to interact with the particular component type. We
could control the buttons found by the query, for example, by clicking them as
follows:


```java
for (ButtonElement button : buttons)
    button.click();
```

[[testbench.elementquery.create]]
== Querying Elements by Component Type (`$`)

The `$` method creates an `ElementQuery` that looks for the given element class. The method is available both for `TestBenchTestCase` (searches the whole current page) and in `TestBenchElement` (searches inside the given element).

```java
// Find the button with id="ok"
ButtonElement button = $(ButtonElement.class).id("ok");
```

```java
// Find the first label inside the layout with id="content"
VerticalLayoutElement layout = $(VerticalLayoutElement.class).id("content");
LabelElement label = layout.$(LabelElement.class).first();
```

[NOTE]
If there is no suitable element class available, you can also use the `$("tag-name")` method to find an element of a given type.

[[testbench.elementquery.testbenchelement]]
== Element Classes

Each Vaadin component has a corresponding element class in TestBench, which
contains methods for interacting with the particular component. The element
classes extend `TestBenchElement`, which in turn implements the
`WebElement` interface, so the Selenium element API can also be used directly.

Add-ons may also define their custom element classes, and you can create custom element classes for any element. An element class is in practice the same as a __page object__, see <<dummy/../testbench-maintainable-tests-using-page-objects#testbench.maintainable.pageobject.defining,Creating a Page Object>> for more details.

[[testbench.elementquery.elementquery]]
== `ElementQuery` filtering methods

You can use the `ElementQuery` instance returned by `$()` to refine the search query using one of the available methods:

* `id("some-id")` Returns the element with the given id
* `attribute("attributeName", "attributeValue")` Adds a filter to only include elements with the given attribute set to the given value
* `onPage()` Redefines the search context to cover the whole page
* `first()` Returns the first matching element
* `waitForFirst()` Returns the first maching element. If no matches are found, keeps waiting until there is a matching element.
* `last()` Returns the last matching element
* `get(N)` Returns the Nth matching element
* `exists()` Returns `true` if the query matches at least one element   
* `all()` Returns a list of all matching elements


