---
title: Finding Elements to Interact With
order: 8
layout: page
---

[[testbench.elementquery]]
= Finding Elements to Interact With

The high-level ElementQuery API allows querying Vaadin components in the browser
according to their component class type, hierarchy, caption, and other
properties. Once one or more components are found, they can be interacted upon.
The query API forms an domain-specific language (DSL), embedded in the
[classname]#TestBenchTestCase# class.

The basic idea of element queries match elements and return queries, which can
again be queried upon, until terminated by a terminal query that returns one or
more elements.

Consider the following query:


----
List<ButtonElement> buttons = $(ButtonElement.class).all();
----

The query returns a list of HTML elements of all the [classname]#Button#
components in the UI. Every Vaadin component has its corresponding element
class, which has methods to interact with the particular component type. We
could control the buttons found by the query, for example, by clicking them as
follows:


----
for (ButtonElement b: buttons)
    b.click();
----

[[testbench.elementquery.create]]
== Querying Elements by Component Type ([methodname]#$#)

The [methodname]#$# method creates an [classname]#ElementQuery# that looks for
the given element class. The method is available both in
[classname]#TestBenchTestcase# and [classname]#ElementQuery#, which defines the
context. The search is done recursively in the context.

----
// Find the button with id="ok"
ButtonElement button = $(ButtonElement.class).id("OK");
----

[[testbench.elementquery.testbenchelement]]
== Element Classes

((("[classname]#TestBenchElement#")))
Each Vaadin component has a corresponding element class in TestBench, which
contains methods for interacting with the particular component. The element
classes extend [classname]#TestBenchElement#. It implements Selenium
[interfacename]#WebElement#, so the Selenium element API can be used directly.

In addition to components, other Vaadin UI elements such as notifications (see
<<dummy/../../creatingtests/testbench-special#testbench.special.notifications,"Testing
Notifications">>) can have their corresponding element class. Add-on libraries
may also define their custom element classes.

[classname]#TestBenchElement# is a TestBench command executor, so you can always
use an element to create query in the sub-tree of the element. For example, in
the following we first find a layout element by its ID and then do a sub-query
to find the first label in it:


----
VerticalLayoutElement layout =
    $(VerticalLayoutElement.class).id("content");
LabelElement label = layout.$(LabelElement.class).first();
----

[[testbench.elementquery.elementquery]]
== [classname]#ElementQuery# Objects

You can use an [classname]#ElementQuery# object to either make sub-queries to
refine the query, or use a query terminator to finalize the query and get one or
more matching elements.


[[testbench.elementquery.terminators]]
== Query Terminators

A query is finalized by a sub-query that returns an element or a collection of
elements.

[methodname]#first()#:: Returns the first found element.

[methodname]#get()#:: Returns the element by index in the collection of matching elements.

[methodname]#all()#:: Returns a [interfacename]#List# of elements of the query type.

[methodname]#id()#:: Returns the unique element having the given ID. Element IDs must always be
unique in the web page. It is therefore meaningless to make a complex query to
match the ID, just matching the element class is enough.


[[testbench.elementquery.own-element-class]]
=== Creating an Element Class

An element class is in practice the same as a __page object__. See <<page objects>> for information on how to create one.


[[testbench.elementquery.extend-element-class]]
=== Extending an Element Class

If you want to add functionality to an existing element, you can extend the original element class and add more helper methods, e.g.
```java
public class MyButtonElement extends ButtonElement {
   
   public void pressUsingSpace() {
     ....
   }
}
```

You can then use your new element by replacing
```java
ButtonElement button = $(ButtonElement.class).id("ok");
...
```

by
```java
MyButtonElement button = $(MyButtonElement.class).id("ok");
button.pressUsingSpace();
```

