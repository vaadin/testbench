---
title: Quick Start
order: 3
layout: page
---

[[testbench.quickstart]]
= Quick Start

In the following, we give instructions for getting Vaadin TestBench running in
minutes. You can create either a new Eclipse project or a Maven project. Both
project types require installing a license key, so we cover that first.

[[testbench.quickstart.eclipse]]
== Quick Start with Eclipse

Once you have installed the Vaadin Plugin for Eclipse, you can use it to create
a new Vaadin 7 project with the TestBench test enabled, as described in
<<dummy/../../framework/getting-started/getting-started-first-project#getting-started.first-project.creation,"Creating
the Project">>. In the project settings, you need to have the [guilabel]#Create
TestBench test# setting enabled.

The test case stub is created under [filename]#test# source folder, so that it
will not be deployed with the application. The project and source folders are
illustrated in <<figure.testbench.quickstart.eclipse-project>>.

[[figure.testbench.quickstart.eclipse-project]]
.Eclipse Project with a Test Case
image::img/eclipse-project-annotated-lo.png[]

You can observe that the UI and the test case are much like in the illustration
in
<<dummy/../../testbench/testbench-overview#figure.testbench.webdriver,"Controlling
the Browser with Testbench">>. The resulting test case stub is described in
detail in
<<dummy/../../testbench/testbench-development#testbench.development.basic,"Basic
Test Case Structure">>.

To run the test, open the [filename]#MyprojectTest.java# file in the editor and
press ShiftAltXT. The browser should open with the application UI and TestBench
run the tests. The results are displayed in the [guilabel]#JUnit# view in
Eclipse, as shown in <<figure.testbench.quickstart.eclipse-junit>>.

[[figure.testbench.quickstart.eclipse-junit]]
.JUnit Test Results in Eclipse
image::img/screenshots/eclipse-junit.png[]


[[testbench.quickstart.maven]]
== Quick Start with Maven

With Maven, you need to create a new Vaadin project with the
[literal]#++vaadin-archetype-application++# archetype, as described in
<<dummy/../../framework/getting-started/getting-started-maven#getting-started.maven,"Using
Vaadin with Maven">>.

The [filename]#src# folder under the project contains both the sources for the
application and the tests. The test case stub in the [filename]#src/test# folder
is described in detail in
<<dummy/../../testbench/testbench-development#testbench.development.basic,"Basic
Test Case Structure">>.

The license needs to be installed or given as parameter for the following
command, as mentioned earlier. Build the project with the [literal]#++verify++#
or a later phase in the build lifecycle. For example, from the command-line:

[subs="normal"]
----
[prompt]#$# [command]#mvn# [parameter]#verify#
----
This will execute all required lifecycle phases, including compilation and
packaging the application, launch Jetty web server to host the application, and
run the TestBench tests. The TestBench tests are run in the
[literal]#++integration-test++# phase, but the web server is stopped in the
[literal]#++post-integration-test++# phase, hence we call the
[literal]#++verify++# phase. The results are reported on the console. A Maven
GUI, such as the one in Eclipse, will provide more visual results.

For more details on the Maven POM configuration for Vaadin TestBench, see
<<dummy/../../testbench/testbench-maven#testbench.maven,"Integration Testing
with Maven">>.
