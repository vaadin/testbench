---
title: Element Selectors
order: 4
layout: page
---

[[testbench.selectors]]
= Element Selectors

In addition to the high-level ElementQuery API described in the previous
section, Vaadin TestBench includes the lower-level Selenium WebDriver API, with
Vaadin extensions. You can find elements also by a plain XPath expression, an
element ID, CSS style class, and so on. You can use such selectors together with
the element queries. Like the ElementQuery API, it can be considered a
domain-specific language (DSL) that is embedded in the
[classname]#TestBenchTestCase# class.

The available selectors are defined as static methods in the
[classname]#com.vaadin.testbench.By# class. They create and return a
[classname]#By# instance, which you can use for the [methodname]#findElement()#
method in [classname]#WebDriver#.

The ID, CSS class, and Vaadin selectors are described below. For others, we
refer to the link:http://seleniumhq.org/docs/03_webdriver.html[Selenium
WebDriver API documentation].

Some selectors are not applicable to all elements, for example if an element
does not have an ID or is outside the Vaadin application.

[[testbench.selectors.id]]
== Finding by ID

Selecting elements by their HTML element [literal]#++id++# attribute is a robust
way to select elements, as noted in
<<dummy/../../bestpractices/testbench-maintainable#testbench.maintainable.robustness,"Increasing
Selector Robustness">>. It requires that you component IDs for the UI components
with [methodname]#setId()#.


----
Button button = new Button("Push Me!");
button.setId("pushmebutton");
----

The button would be rendered as a HTML element: [literal]#++<div
id="pushmebutton" ...>...</div>++#. The element would then be accessible with a
low-level WebDriver call:


----
findElement(By.id("pushmebutton")).click();
----

The selector is equivalent to the statically typed element query
[literal]#++$(ButtonElement.class).id("pushmebutton")++#.


[[testbench.selectors.css]]
== Finding by CSS Class

An element with a particular CSS style class name can be selected with the
[methodname]#By.className()# method. CSS selectors are useful for elements which
have no ID, nor can be found easily from the component hierarchy, but do have a
particular unique CSS style. Tooltips are one example, as they are floating
[literal]#++div++# elements under the root element of the application. Their
[literal]#++v-tooltip++# style makes it possible to select them as follows:


----
// Verify that the tooltip contains the expected text
String tooltipText = findElement(
    By.className("v-tooltip")).getText();
----

you can find the complete example
[filename]#link:https://github.com/vaadin/testbench-demo/blob/8.0/src/test/java/com/vaadin/testbenchexample/AdvancedCommandsITCase.java[AdvancedCommandsITCase.java]# in link:https://github.com/vaadin/testbench-demo/tree/8.0/src/test/java/com/vaadin/testbenchexample[TestBench demo].