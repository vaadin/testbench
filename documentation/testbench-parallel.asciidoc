---
title: Parallel Execution of Tests
order: 14
layout: page
---

[[testbench.parallel]]
= Parallel Execution of Tests

The [classname]#ParallelTest# class provides an easy way to run tests in
parallel locally, as well as remotely in a test grid.

[[testbench.parallel.local]]
== Local Parallel Execution

To enable parallel execution of tests, usually during test development, you need
to extend the [classname]#ParallelTest# instead of
[classname]#TestBenchTestCase# and annotate the test case class with
[literal]#++@RunLocally++#.


----
@RunLocally
public class MyTest extends ParallelTest {
   @Test
   ...
}
----

When you run the tests, TestBench launches multiple browser windows to run each
test in parallel.

Parallel execution defaults to Firefox. You can give another browser as a
parameter for the annotation, as enumerated in the [classname]#Browser#
enumeration:


----
@RunLocally(Browser.CHROME)
----

For Chrome and IE, you need to have the browser driver installed, as described
in
<<dummy/../../testbench/testbench-installation#testbench.installation.browserdrivers,"Installing
Browser Drivers">>.


[[testbench.parallel.grid]]
== Multi-Browser Execution in a Grid

To run tests in multiple different browsers or remotely, you first need to set
up and launch a grid hub and one or more grid nodes, as described in
<<dummy/../../testbench/testbench-grid#testbench.grid,"Running Tests in a
Distributed Environment">>. This enables remote execution in a test grid,
although you can run the hub and a test node also in your development
workstation.

To run a test case class in a grid, you simply need to annotate the test case
classes with the [literal]#++@RunOnHub++# annotation. It takes the host address
of the hub as parameter, with [literal]#++localhost++# as the default host. You
need to define the desired browser capabilities in a method annotated with
[literal]#++@BrowserConfiguration++#. It must return a list of
[classname]#DesiredCapabilities#.


----
@RunOnHub("hub.testgrid.mydomain.com")
public class MyTest extends ParallelTest {
   @Test
   ...

   @BrowserConfiguration
   public List<DesiredCapabilities> getBrowserConfiguration() {
       List<DesiredCapabilities> browsers =
           new ArrayList<DesiredCapabilities>();

       // Add all the browsers you want to test
       browsers.add(BrowserUtil.firefox());
       browsers.add(BrowserUtil.chrome());
       browsers.add(BrowserUtil.ie11());

       return browsers;
   }
}
----

The actual browsers tested depends on the browser capabilities of the test node
or nodes.

If you have more test classes, you can put the configuration in a common base
class that extends [classname]#ParallelTest#.
